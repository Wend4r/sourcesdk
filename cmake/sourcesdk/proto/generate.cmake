if(NOT SOURCESDK_DIR)
	message(FATAL_ERROR "SOURCESDK_DIR is empty")
endif()

if(NOT PROTOBUF_DIR)
	message(FATAL_ERROR "PROTOBUF_DIR is empty")
endif()

if(NOT SOURCESDK_PROTO_DIRS)
	message(FATAL_ERROR "SOURCESDK_PROTO_DIRS is empty")
endif()

if(NOT SOURCESDK_PROTO_FILENAMES)
	# message(WARNING "SOURCESDK_PROTO_FILENAMES is empty")

	return()
endif()

# Function to append proto directories
function(append_proto_dirs OUT_ARGS PROTO_DIRS)
	foreach(PROTO_DIR IN LISTS PROTO_DIRS)
		list(APPEND ${OUT_ARGS} --proto_path=${PROTO_DIR})
	endforeach()
	set(${OUT_ARGS} ${${OUT_ARGS}} PARENT_SCOPE)
endfunction()

# Function to compile protos
function(sourcesdk_compile_protos PROTO_FILENAMES PROTO_ARGS PROTO_OUTPUT_DIR LOGS_DIR ERROR_LOGS_DIR PROTO_OUT_PREFIX)
	file(MAKE_DIRECTORY ${LOGS_DIR})
	file(MAKE_DIRECTORY ${ERROR_LOGS_DIR})

	foreach(PROTO_FILENAME IN LISTS PROTO_FILENAMES)
		if(PROTO_OUTPUT_DIR)
			set(PROTO_DIR "${PROTO_OUTPUT_DIR}")
		else()
			get_filename_component(PROTO_DIR "${PROTO_FILENAME}" DIRECTORY)
		endif()

		get_filename_component(PROTO_DIRECTORY "${PROTO_FILENAME}" DIRECTORY)
		get_filename_component(PROTO_WLE "${PROTO_FILENAME}" NAME_WLE)

		if(PROTO_DIRECTORY)
			set(PROTO "${PROTO_DIRECTORY}/${PROTO_WLE}")
		else()
			set(PROTO "${PROTO_WLE}")
		endif()
		set(PROTO_FILENAME_WITH_PATH "${PROTO_DIR}/${PROTO}")
		set(PROTO_SOURCE "${PROTO_FILENAME_WITH_PATH}.pb.cc")

		if(EXISTS "${PROTO_SOURCE}")
			message(STATUS "Compiled ${PROTO_OUT_PREFIX}${PROTO_FILENAME} exists")
		else()
			set(PROTO_OUTPUT_DATE_LOG_FILENAME "${LOGS_DIR}/${PROTO}.log")
			set(PROTO_ERRORS_DATE_LOG_FILENAME "${ERROR_LOGS_DIR}/${PROTO}.log")

			message(STATUS "Compiling ${PROTO_OUT_PREFIX}${PROTO_FILENAME} ...")
			execute_process(
				OUTPUT_FILE ${PROTO_OUTPUT_DATE_LOG_FILENAME}
				ERROR_FILE ${PROTO_ERRORS_DATE_LOG_FILENAME}
				COMMAND ${SOURCESDK_PROTOC_EXECUTABLE} ${PROTO_ARGS} --cpp_out=${PROTO_DIR} ${PROTO_FILENAME}
				WORKING_DIRECTORY ${SOURCESDK_DIR}
			)
		endif()
	endforeach()
endfunction()

# Prepare proto args
set(SOURCESDK_PROTO_ARGS --proto_path=${SOURCESDK_PROTOBUF_SOURCE_DIR})
append_proto_dirs(SOURCESDK_PROTO_ARGS "${SOURCESDK_PROTO_DIRS}")

set(SOURCESDK_CUSTOM_PROTO_ARGS
	${SOURCESDK_PROTO_ARGS}
	--proto_path=${SOURCESDK_CUSTOM_PROTO_OUTPUT_DIR}
)

message(STATUS "To compile protos will be used ${SOURCESDK_PROTOC_EXECUTABLE}")

# Compile standard protos
sourcesdk_compile_protos(
	"${SOURCESDK_PROTO_SOURCE_FILENAMES}"
	"${SOURCESDK_PROTO_ARGS}"
	"${SOURCESDK_PROTO_OUTPUT_DIR}"
	"${SOURCESDK_LOGS_PROTOS_DATE_DIRECTORY}"
	"${SOURCESDK_LOGS_PROTOS_DATE_ERRORS_DIRECTORY}"
	""
)

# Compile custom protos
sourcesdk_compile_protos(
	"${SOURCESDK_CUSTOM_PROTO_SOURCE_FILENAMES}"
	"${SOURCESDK_CUSTOM_PROTO_ARGS}"
	"${SOURCESDK_CUSTOM_PROTO_OUTPUT_DIR}"
	"${SOURCESDK_LOGS_PROTOS_DATE_DIRECTORY}"
	"${SOURCESDK_LOGS_PROTOS_DATE_ERRORS_DIRECTORY}"
	"custom "
)
